{
  "models": [
    {
      "path": "../models/dolphin.gguf",
      "name": "dolphin",
      "config": {
        "mirostat": 0,
        "mirostat_eta": 0.1,
        "is_embedding_model": false,
        "mirostat_tau": 5.0,
        "num_ctx": 8192,
        "use_mem_lock": false,
        "repeat_last_n": 64,
        "repeat_penalty": 1.1,
        "temperature": 0.8,
        "seed": 0,
        "tfs_z": 1.0,
        "num_predict": 128,
        "top_k": 40,
        "top_p": 0.9
      },
      "chat_template": {
        "user_template": "<|im_start|>user {content}<|im_end|>",
        "system_template": "<|im_start|>system {content} <|im_end|>",
        "assistant_template": "<|im_start|>assistant {content} <|im_end|>",
        "tool_response_template": "<|im_start|>tool <tool_response> {content} </tool_response> <|im_end|>",
        "assistant_prompt_template": "<|im_start|>assistant ",
        "tool_template": "<|im_start|>system You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. You can also engage in general conversation Don't make assumptions about what values to plug into functions. Here are all the available tools, do not use any not in this list: <tools> {tools} </tools> Use the following pydantic model json schema for each tool call you will make {template} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:\n <tool_call> \n {template} \n</tool_call>\n  Some function will give back data, that data will be given by the agent 'tool'<|im_end|>",
        "stops": ["INST", "<<SYS>>", "<</SYS>>"]
      }
    },
    {
      "path": "../models/nomic.gguf",
      "name": "nomic",
      "config": {
        "mirostat": 0,
        "mirostat_eta": 0.1,
        "mirostat_tau": 5.0,
        "num_ctx": 8192,
        "is_embedding_model": false,
        "use_mem_lock": false,
        "repeat_last_n": 64,
        "repeat_penalty": 1.1,
        "temperature": 0.8,
        "seed": 0,
        "tfs_z": 1.0,
        "num_predict": 128,
        "top_k": 40,
        "top_p": 0.9
      },
      "chat_template": {
        "user_template": "<|im_start|>user {content}<|im_end|>",
        "system_template": "<|im_start|>system {content} <|im_end|>",
        "assistant_template": "<|im_start|>assistant {content} <|im_end|>",
        "tool_response_template": "<|im_start|>tool <tool_response> {content} </tool_response> <|im_end|>",
        "assistant_prompt_template": "<|im_start|>assistant ",
        "tool_template": "<|im_start|>system You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. You can also engage in general conversation Don't make assumptions about what values to plug into functions. Here are all the available tools, do not use any not in this list: <tools> {tools} </tools> Use the following pydantic model json schema for each tool call you will make {template} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:\n <tool_call> \n {template} \n</tool_call>\n  Some function will give back data, that data will be given by the agent 'tool'<|im_end|>",
        "stops": ["INST", "<<SYS>>", "<</SYS>>"]
      }
    }
  ]
}
